Go (aka Golang)

fblanco@viantinc.com

* History
Created in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google.
Go is a programming language designed to help solve Google's problems.

Google has BIG problems.

* History continued

- Go was designed by and for people who write—and read and debug and maintain—large software systems.
- Go's purpose is not research into programming language design.
- Go's purpose is to make its designers' programming lives better.

* Blurb describing the language
Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It's a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.
--[[golang.org]]

* Known Companies using Go
- Google (Youtube-vitesse, Kubernetes, …)
- Baidu
- Twitter
- Facebook
- DropBox
- Docker
- CoreOS
- SoundCloud
- Square
- MediaMath
- Many many more: [[https://github.com/golang/go/wiki/GoUsers][wiki]]

* Why do I like Go
- Language is very simple, spec is very small compared to other languages.
- Compiles to native code. Can compile to multiple architectures and OSs from my mac
- Amazing concurrency primitives
- Very robust standard library. Pretty much everything we need to build our type of applications
- Very good tooling
- Very opinionated

* Language spec comparison
.image speccomparison.png

* Go is picking up momentum really fast
.image trends.png

* Current release
[[https://blog.golang.org/go1.6][Go 1.6]]

* GC Improvements over time
.image gc_improvements.png

* GC 1.5 vs 1.6
.image gc_1.5_vs_1.6.png

* RTB
Let's try building an RTB auctioning system
Requirements:

- needs to accept an impression request via http
- needs to auction the impression to n bidders
- needs to implement a timeout mechanism to avoid long latency caused by some slow bidders
- pick a winner as soon as all bidders respond or timeout is reached
- need a bidder to test this

* Let's start hacking a bidder...

* This is it for the bidder
The main function, running the http server
.code ../bidder/bidder.go /^func main/,/^}/
The handler function
.code ../bidder/bidder.go /^func biddr/,/^}/

* Let's hack the auctioneer...

* This is it for the auctioneer
The auction http hanlder function
.code ../auctioneer/auctioneer.go /^func auction/,/^}/
* The bidders caller function
.code ../auctioneer/auctioneer.go /^func callBidders/,/^}/
* The bids collector function
.code ../auctioneer/auctioneer.go /^func collectBids/,/^}/

* What next?
- I'd like everyone to start playing with Go
- I'd like to see Go used in our production environment, across all my team
- We'll setup some regular talks about it (once a month?), someone will show case their use of Go


* Some resources
- [[https://golang.org]]
- [[https://golangnews.com]]
- [[https://forum.golangbridge.org]]
- [[https://groups.google.com/forum/#!forum/golang-nuts]]
- [[https://www.youtube.com/user/gocoding]]
* Book
[[http://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440/ref=sr_1_1?ie=UTF8&qid=1459206891&sr=8-1&keywords=golang][The Go Programming Language]]
